"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processPackages = void 0;
const find_workspace_dir_1 = require("@pnpm/find-workspace-dir");
const find_workspace_packages_1 = require("@pnpm/find-workspace-packages");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const constants_1 = require("../constants");
const sort_1 = require("./sort");
async function processPackages() {
    const workspacePackages = await getPackages();
    let mainVersion;
    const packageVersionMap = new Map();
    for (const localPackage of workspacePackages) {
        const { name, version } = localPackage.manifest;
        if (name === constants_1.MAIN_PACKAGE) {
            mainVersion = version;
        }
        const changelogPath = (0, node_path_1.join)(localPackage.dir, 'CHANGELOG.md');
        if ((0, node_fs_1.existsSync)(changelogPath)) {
            // The package has been bumped if a changelog file is generated
            // (also catching packages bumped only due to internal dependency updates from changeset)
            if (name && version) {
                packageVersionMap.set(name, version);
            }
            // Fix 'version' field in unversioned packages wrongly set to 'null' by changeset
            if (version === null) {
                const { version: _version, ...manifest } = localPackage.manifest;
                await localPackage.writeProjectManifest(manifest);
            }
            // Remove changelog files generated by changeset in favor of release notes
            (0, node_fs_1.unlinkSync)(changelogPath);
        }
    }
    const packageVersions = Array.from(packageVersionMap, ([name, version]) => ({
        name,
        version,
    }))
        .filter(({ name }) => ![constants_1.MAIN_PACKAGE, ...Object.keys(constants_1.UNTYPED_PACKAGES)].includes(name))
        .sort((0, sort_1.sortByExternalOrder)(constants_1.PACKAGE_ORDER, 'name'));
    return { mainVersion, packageVersions };
}
exports.processPackages = processPackages;
async function getPackages() {
    const workspaceRoot = await (0, find_workspace_dir_1.findWorkspaceDir)(process.cwd());
    if (!workspaceRoot) {
        throw new Error(`Couldn't locate workspace root`);
    }
    return (0, find_workspace_packages_1.findWorkspacePackagesNoCheck)(workspaceRoot);
}
